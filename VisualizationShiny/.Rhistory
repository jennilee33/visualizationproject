version
install.packages("knitr")
install.packages("tidyr")
install.packages('rmarkdown')
install.packages('knitr')
install.packages('data.table')
install.packages('data.table')
shiny::runApp('Documents/2018/NYC Data Science Academy/Shiny/dashboarddemo')
knitr::opts_chunk$set(echo = TRUE)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(raw.df) = tolower(names(raw.df)) #changes all to lower case, updates data set
raw.df <- readr::read_csv("data.csv")
head(raw.df)
str(raw.df)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(raw.df) = tolower(names(raw.df)) #changes all to lower case, updates data set
head(raw.df) #checks if lower case columns
names(raw.df) <- sub(" ", "", names(raw.df))
head(raw.df)
names(raw.df) <- sub("date", "", names(raw.df))
head(raw.df)
raw.df <- readr::read_csv("data.csv")
raw.df <- readr::read_csv("data.csv")
head(raw.df)
str(raw.df)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(raw.df) = tolower(names(raw.df)) #changes all to lower case, updates data set
head(raw.df) #checks if lower case columns
names(raw.df) <- sub(" ", "", names(raw.df)) #removes spaces in column headers
library(dplyr)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(raw.df) = tolower(names(raw.df)) #changes all to lower case, updates data set
head(raw.df) #checks if lower case columns
names(raw.df) <- sub(" ", "", names(raw.df)) #removes spaces in column headers
head(raw.df)
rename(raw.df, cuisinedescription = cuisine, inspectiondate = inspection.date)
rename(raw.df, cuisine = cuisinedescription, inspection.date = inspectiondate)
head(raw.df)
rename(raw.df, cuisine = cuisinedescription, inspection.date = inspectiondate)
head(raw.df)
select(raw.df, cuisine = cuisinedescription, inspection.date = inspectiondate)
head(raw.df)
select(raw.df, "cuisine" = "cuisinedescription", "inspection.date" = "inspectiondate")
head(raw.df)
rename(raw.df, "cuisine" = "cuisinedescription", "inspection.date" = "inspectiondate")
head(raw.df)
str(raw.df)
rename(raw.df, "cuisine" = cuisinedescription, "inspection.date" = "inspectiondate")
str(raw.df)
dplyr::rename(raw.df, "cuisine" = cuisinedescription, "inspection.date" = "inspectiondate")
head(raw.df)
dplyr::rename(raw.df, cuisine = cuisinedescription, inspection.date = inspectiondate)
head(raw.df)
library(tidyverse)
library(tidyverse)
library(dplyr)
dplyr::rename(raw.df, cuisine = cuisinedescription, inspection.date = inspectiondate)
head(raw.df)
raw.df2 = dplyr::rename(raw.df, cuisine = cuisinedescription, inspection.date = inspectiondate)
head(raw.df2)
# 2. Convert the inspection.date column from character to date format.
as.Date(raw.df2$inspection.date)
# 2. Convert the inspection.date column from character to date format.
raw.df2 = as.Date(raw.df2$inspection.date)
head(raw.df)
# 2. Convert the inspection.date column from character to date format.
raw.df2 = as.Date(raw.df2$inspection.date, format = "%m.%d.%Y")
head(raw.df2)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(raw.df) = tolower(names(raw.df)) #changes all to lower case, updates data set
head(raw.df) #checks if lower case columns
names(raw.df) <- sub(" ", "", names(raw.df)) #removes spaces in column headers
head(raw.df)
raw.df2 = dplyr::rename(raw.df, cuisine = cuisinedescription, inspection.date = inspectiondate) #must create new data frame or else rename does not work
head(raw.df2) #checks columns renamed to new values
# 2. Convert the inspection.date column from character to date format.
raw.dfdate = as.Date(raw.df2$inspection.date, format = "%Y.%m.%d")
head(raw.dfdate)
# 2. Convert the inspection.date column from character to date format.
raw.dfdate = as.Date(raw.df2$inspection.date, format = "%m.%d.%y")
head(raw.dfdate)
# 2. Convert the inspection.date column from character to date format.
raw.dfdate = as.Date(as.character(raw.df2$inspection.date), format = "%m.%d.%Y")
head(raw.dfdate)
# 2. Convert the inspection.date column from character to date format.
raw.dfdate = as.Date(as.character(raw.df2$inspection.date), format = "%m/%d/%Y")
head(raw.dfdate)
head(raw.df2)
# 2. Convert the inspection.date column from character to date format.
as.Date(as.character(raw.df2$inspection.date), format = "%m/%d/%Y")
head(raw.df2)
# 2. Convert the inspection.date column from character to date format.
raw.df2$datecol = as.Date(as.character(raw.df2$inspection.date), format = "%m/%d/%Y")
head(raw.df2)
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
raw.df2$datecol = substr(raw.df2$inspection.date,1,2)
# 2. Convert the inspection.date column from character to date format.
raw.df2$datecol = as.Date(as.character(raw.df2$inspection.date), format = "%m/%d/%Y") #created a new column for inspection.date as a date format
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
raw.df2$month = substr(raw.df2$inspection.date,1,2)
head(raw.df2)
# 4. Impute the missing values for the 'grade' column
raw.df3 =
raw.df2 %>%
ifelse(0<=score|score<14,
grade=="A",
ifelse(14<=score|score<28,
grade=="B",
ifelse(score>=28,
grade=="C","NA")))
# 4. Impute the missing values for the 'grade' column
raw.df3 =
raw.df2 %>%
ifelse(0<=score||score<14,
grade=="A",
ifelse(14<=score||score<28,
grade=="B",
ifelse(score>=28,
grade=="C",
"NA")))
# 4. Impute the missing values for the 'grade' column
raw.df3 =
ifelse(0<=score||score<14,
grade=="A",
ifelse(14<=score||score<28,
grade=="B",
ifelse(score>=28,
grade=="C",
"NA")))
# 4. Impute the missing values for the 'grade' column
raw.df3 =
ifelse(0<=raw.df2$score||raw.df2$score<14,
grade=="A",
ifelse(14<=raw.df2$score||raw.df2$score<28,
grade=="B",
ifelse(raw.df2$score>=28,
grade=="C",
"NA")))
# 4. Impute the missing values for the 'grade' column
raw.df3 =
ifelse(0<=raw.df2$score||raw.df2$score<14,
raw.df2$grade=="A",
ifelse(14<=raw.df2$score||raw.df2$score<28,
raw.df2$grade=="B",
ifelse(raw.df2$score>=28,
raw.df2$grade=="C",
"NA")))
head(raw.df3)
# 4. Impute the missing values for the 'grade' column
ifelse(0<=raw.df2$score||raw.df2$score<14,
raw.df2$grade=="A",
ifelse(14<=raw.df2$score||raw.df2$score<28,
raw.df2$grade=="B",
ifelse(raw.df2$score>=28,
raw.df2$grade=="C",
"NA")))
head(raw.df2)
raw.df2$score =
ifelse(0<=raw.df2$score||raw.df2$score<14,
"A",
ifelse(14<=raw.df2$score||raw.df2$score<28,
"B",
ifelse(raw.df2$score>=28,
"C",
"NA")))
head(raw.df2)
raw.df2 = dplyr::rename(raw.df, cuisine = cuisinedescription, inspection.date = inspectiondate) #must create new data frame or else rename does not work
head(raw.df2) #checks columns renamed to new values
# 2. Convert the inspection.date column from character to date format.
raw.df2$datecol = as.Date(as.character(raw.df2$inspection.date), format = "%m/%d/%Y") #created a new column for inspection.date as a date format
head(raw.df2) #checks new column in date format added
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
raw.df2$month = substr(raw.df2$inspection.date,1,2)
head(raw.df2)
raw.df2$grade =
ifelse(0<=raw.df2$score||raw.df2$score<14,
"A",
ifelse(14<=raw.df2$score||raw.df2$score<28,
"B",
ifelse(raw.df2$score>=28,
"C",
"NA")))
head(raw.df2)
raw.df2$grade =
ifelse(0<=raw.df2$score&raw.df2$score<14,
"A",
ifelse(14<=raw.df2$score&raw.df2$score<28,
"B",
ifelse(raw.df2$score>=28,
"C",
"NA")))
head(raw.df2)
raw.df2$action =
gsub(“Violations were cited in the following area(s).”,“violations”,raw.df2$action)
gsub(“Violations were cited in the following area(s).”,“violations”,raw.df2$action)
gsub("Violations were cited in the following area(s).","violations",raw.df2$action)
gsub("Violations were cited in the following area(s).","violations",raw.df2$action)
gsub("Violations were cited in the following area(s).","violations",raw.df2$action)
gsub("Establishment Closed by DOHMH. Violations were cited in the following area(s) and those requiring immediate action were addressed.","closed",raw.df2$action)
gsub("Establishment re-closed by DOHMH","reclosed",raw.df2$action)
gsub("Establishment re-closed by DOHMH","reclosed",raw.df2$action)
gsub("No violations were recorded at the time of this inspection.","no violations",raw.df2$action)
gsub("Establishment re-opened by DOHMH","reopened",raw.df2$action)
# 6. We want to filter out missing values to make our lives easier for further analysis.
is.na(raw.df2$boro)
str(raw.df$boro)
raw.df3 =
raw.df2 %>%
filter(., is.na(raw.df2$boro)=FALSE)
filter(., is.na(raw.df2$boro)="FALSE"")
raw.df3 =
raw.df2 %>%
filter(., is.na(raw.df2$boro)="FALSE")
raw.df3 =
raw.df2 %>%
dplyr::filter(., is.na(raw.df2$boro)="FALSE")
raw.df3 =
raw.df2 %>%
dplyr::filter(is.na(raw.df2$boro)="FALSE")
raw.df3 =
raw.df2 %>%
filter(.,is.na(raw.df2$boro)=="FALSE")
head(raw.df3)
raw.df3 =
raw.df2 %>%
filter(.,is.na(raw.df2$boro)=="FALSE")%>%
filter(.,is.na(raw.df2$score)=="FALSE", raw.df2$score<0)
head(raw.df3)
raw.df2$inspection.date
raw.df3 =
raw.df2 %>%
filter(.,is.na(raw.df2$boro)=="FALSE")%>%
filter(.,is.na(raw.df2$score)=="FALSE", raw.df2$score<0)
raw.df4 =
raw.df3 %>%
select(., camis, boro, cuisine, inspection.date, action, score, grade, month)
head(raw.df4)
raw.df3 =
raw.df2 %>%
filter(.,is.na(raw.df2$boro)=="FALSE")%>%
filter(.,is.na(raw.df2$score)=="FALSE", raw.df2$score>0)
raw.df4 =
raw.df3 %>%
select(., camis, boro, cuisine, inspection.date, action, score, grade, month)
head(raw.df4)
#filter out inspection date that does not make sense still needs to be added
head(raw.df3)
inspections=
raw.df4 %>%
group_by(., dba) %>%
summarise(., inspection.date)
inspections=
raw.df4 %>%
group_by(., camis) %>%
summarise(., inspection.date)
inspections=
raw.df4 %>%
group_by(., camis) %>%
summarise(., unique(inspection.date))
inspections=
raw.df4 %>%
group_by(., camis) %>%
summarise(., count(inspection.date))
inspections=
raw.df4 %>%
group_by(., camis) %>%
summarise(., number = count(inspection.date))
inspections=
raw.df4 %>%
group_by(., camis) %>%
summarise(., number = unique(inspection.date))
unique(inspection.date)
inspections=
raw.df4 %>%
group_by(., camis) %>%
summarise(., number = unique(raw.df3$inspection.date))
inspections=
raw.df4 %>%
group_by(., camis) %>%
summarise(., number = count(raw.df3$inspection.date))
head(raw.df4)
as.character(raw.df4$camis)
inspections=
raw.df4 %>%
group_by(., camis) %>%
summarise(., number = count(raw.df3$inspection.date))
as.integer(raw.df4$camis)
# 8. Unique inspections
head(raw.df4)
inspections=
raw.df4 %>%
group_by(., raw.df4$camis) %>%
summarise(., number = count(raw.df3$inspection.date))
group_by(., month) %>%
inspections
inspections=
raw.df4 %>%
group_by(., month) %>%
summarise(., count(camis))
inspections=
raw.df4 %>%
group_by(., inspection.date) %>%
summarise(., count(camis))
inspections=
raw.df4 %>%
select(., camis, inspection.date)
inspections
inspections=
raw.df4 %>%
select(., camis, inspection.date) %>%
filter(., unique(camis))
inspections=
raw.df4 %>%
select(., camis, inspection.date) %>%
inspections
inspections=
raw.df4 %>%
select(., camis, inspection.date) %>%
inspections
inspections=
raw.df4 %>%
select(., camis, inspection.date)
inspections
install("mapproj")
install.packages("mapproj")
###########################
#####One-Sample T-Test#####
###########################
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
###########################
#####Two-Sample T-Test#####
###########################
set.seed(0)
SAT.Spring = rnorm(100, 1550, 200) #Randomly generating 100 normally distributed
#observations with a mean of 1550 and a
#standard deviation of 200.
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
legend("topright", c("Spring", "Fall"), lwd = 1, col = c("red", "blue"))
########################################
#####Chick Weight Data Set Examples#####
########################################
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
chickwts #Visually inspect the data.
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
U = runif(12*1000)
mat = matrix(data = U, nrow = 12)
normvec = colSums(mat)
hist(normvec)
z = rnorm(10, 1000)
z = rnorm(10*1000)
z = rnorm(10*1000)
zSq = z * z
chimat = matrix(zSq, 10,1000)
chiSqvec = colSums(chimat)
hist(chiSqvec)
hist(chiSqvec, add = T)
hist(rchisq(1000,10), add=T, color = 'Red')
hist(rchisq(1000,10), add=T, color = 'red')
hist(rchisq(1000,10), add=T, col = 'red')
(chiSqvec / 10)/(chiSqvec2 / 20)
z = rnorm(20*1000)
zSq = z * z
chimat = matrix(zSq, 10,1000)
chiSqvec2 = colSums(chimat)
(chiSqvec / 10)/(chiSqvec2 / 20)
fvec =
(chiSqvec / 10)/(chiSqvec2 / 20)
hist(fvec)
fvec =
(chiSqvec / 10)/(chiSqvec2 / 20)
hist(fvec)
hist(fvec, add + T)
hist(fvec, add = T)
hist(rf(1000, df = 10, df2 = 20))
hist(rf(1000, df = 10, df2 = 20), col = 'red')
hist(fvec, add = T, col = 'blue')
hist(rf(1000, df = 10, df2 = 20),
col = 'red')
hist(fvec, add = T, col = 'blue')
hist(rf(1000, df = 10, df2 = 20),
col = 'red')
#z = (x-mu)/sigma ->>> if you square z, then its a single x^2 instance. if we assume a poisson random
library(devtools) #calls devtools package
library(RGoogleAnalytics) #calls R Google Analytics package
ga_auth()
library(RGoogleAnalytics) #calls R Google Analytics package
library(ggplot2)
install("googleAuthR")
install("bigrquery")
install.packages("bigrquery")
install.packages(bigrquery)
install.packages("bigrquery")
library(devtools) #calls devtools package
install.packages("bigrquery") #installs bigrquery package
VisualizationShiny <- read.csv(file = "./data.csv")
VisualizationShiny <- read.csv(file = "./data/data.csv")
VisualizationShiny <- read.csv(file = "./data/data.csv")
library(shiny)
VisualizationShiny <- read.csv(file = "./data/data.csv")
VisualizationShiny <- read.csv(file = "./data/data.csv")
setwd("~/Documents/2018/NYC_DSA/Projects/VisualizationShiny")
VisualizationShiny <- read.csv(file = "./data/data.csv")
function(input, output) {
output$count <- renderPlot(
VisualizationShiny # %>%
#      filter(origin == input$origin & dest == input$dest) %>%
#      group_by(carrier) %>%
#      count() %>%
#      ggplot(aes(x = carrier, y = n)) +
#      geom_col(fill = "lightblue") +
#      ggtitle("Number of flights")
)
}
runApp()
runApp()
head(VisualizationShiny)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github('rstudio/DT')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
